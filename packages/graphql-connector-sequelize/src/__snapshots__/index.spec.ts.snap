// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema should correctly load the data 1`] = `
Array [
  Object {
    "createdAt": "2018-11-09T16:00:00.000Z",
    "email": "admin@example.com",
    "id": "1010101010101010-10101010-4101010-8101010-101010101010101010101010",
    "name": "Admin",
    "nickname": "Admin",
    "state": "admin",
    "updatedAt": "2018-11-09T16:00:00.000Z",
  },
  Object {
    "createdAt": "2018-11-09T16:30:00.000Z",
    "email": "georg@example.com",
    "id": "2020202020202020-20202020-4202020-8202020-202020202020202020202020",
    "name": "Georg",
    "nickname": "Mr.G!",
    "state": "member",
    "updatedAt": "2018-11-09T16:30:00.000Z",
  },
  Object {
    "createdAt": "2018-11-09T16:40:00.000Z",
    "email": "paul@example.com",
    "id": "3030303030303030-30303030-4303030-8303030-303030303030303030303030",
    "name": "Paul",
    "nickname": "Paulchen",
    "state": "guest",
    "updatedAt": "2018-11-09T16:40:00.000Z",
  },
  Object {
    "createdAt": "2018-11-09T16:50:00.000Z",
    "email": "frank@example.com",
    "id": "4040404040404040-40404040-4404040-8404040-404040404040404040404040",
    "name": "Frank",
    "nickname": "Effy",
    "state": "member",
    "updatedAt": "2018-11-09T16:50:00.000Z",
  },
]
`;

exports[`schema should create a new user 1`] = `
Object {
  "newUser": null,
}
`;

exports[`schema should find all posts and their authors 1`] = `
Object {
  "Posts": Object {
    "nodes": Array [
      Object {
        "User": Object {
          "name": "Admin",
        },
        "title": "This is a Post by the Admin",
      },
      Object {
        "User": Object {
          "name": "Paul",
        },
        "title": "This is by Paulchen",
      },
    ],
  },
}
`;

exports[`schema should find all users that have written a post 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "Posts": Object {
          "nodes": Array [
            Object {
              "title": "This is a Post by the Admin",
            },
          ],
        },
        "name": "Admin",
      },
      Object {
        "Posts": Object {
          "nodes": Array [
            Object {
              "title": "This is by Paulchen",
            },
          ],
        },
        "name": "Paul",
      },
    ],
  },
}
`;

exports[`schema should find everybody except the admin 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "name": "Georg",
        "state": "member",
      },
      Object {
        "name": "Paul",
        "state": "guest",
      },
      Object {
        "name": "Frank",
        "state": "member",
      },
    ],
  },
}
`;

exports[`schema should find only Georg 1`] = `null`;

exports[`schema should find the users in ascending order of id 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "id": "1010101010101010-10101010-4101010-8101010-101010101010101010101010",
        "name": "Admin",
      },
      Object {
        "id": "2020202020202020-20202020-4202020-8202020-202020202020202020202020",
        "name": "Georg",
      },
      Object {
        "id": "3030303030303030-30303030-4303030-8303030-303030303030303030303030",
        "name": "Paul",
      },
      Object {
        "id": "4040404040404040-40404040-4404040-8404040-404040404040404040404040",
        "name": "Frank",
      },
    ],
  },
}
`;

exports[`schema should find the users in descending order of id 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "id": "4040404040404040-40404040-4404040-8404040-404040404040404040404040",
        "name": "Frank",
      },
      Object {
        "id": "3030303030303030-30303030-4303030-8303030-303030303030303030303030",
        "name": "Paul",
      },
      Object {
        "id": "2020202020202020-20202020-4202020-8202020-202020202020202020202020",
        "name": "Georg",
      },
      Object {
        "id": "1010101010101010-10101010-4101010-8101010-101010101010101010101010",
        "name": "Admin",
      },
    ],
  },
}
`;

exports[`schema should generate a full schema 1`] = `
"input CreateLoopData {
  id: ID
  createdAt: Date
  updatedAt: Date
  nextId: ID
  next: LoopWhere
}

input CreatePostData {
  id: ID
  title: String
  createdAt: Date
  updatedAt: Date
  UserId: ID
  User: UserWhere
}

input CreateUserData {
  id: ID
  state: UserStateEnumType
  nickname: String
  name: String
  email: String
  createdAt: Date
  updatedAt: Date
  Posts: PostWhere
}

\\"\\"\\"
A special custom Scalar type for Dates that converts to a ISO formatted string 
\\"\\"\\"
scalar Date

interface List {
  nodes: [Node!]!
  page: Page!
}

type Loop implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  nextId: ID
  next: Loop
}

input LoopFilter {
  AND: [LoopFilter!]
  OR: [LoopFilter!]
  NOT: LoopFilter
  id: ID
  id_in: [ID!]
  nextId: ID
  nextId_in: [ID!]
}

type Loops implements List {
  nodes: [Loop!]!
  page: Page!
}

enum LoopSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  nextId_ASC
  nextId_DESC
  next_ASC
  next_DESC
}

input LoopWhere {
  AND: [LoopFilter!]
  OR: [LoopFilter!]
  NOT: LoopFilter
  id: ID
  id_in: [ID!]
  nextId: ID
  nextId_in: [ID!]
  next_empty: LoopFilter
  next_some: LoopFilter
}

type Mutation {
  createUser(data: CreateUserData): User
  updateUser(data: UpdateUserData, where: UserWhere): User
  deleteUsers(where: UserWhere, order: UserSortOrder): Users!
  createLoop(data: CreateLoopData): Loop
  updateLoop(data: UpdateLoopData, where: LoopWhere): Loop
  deleteLoops(where: LoopWhere, order: LoopSortOrder): Loops!
  createPost(data: CreatePostData): Post
  updatePost(data: UpdatePostData, where: PostWhere): Post
  deletePosts(where: PostWhere, order: PostSortOrder): Posts!
}

interface Node {
  id: ID
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Post implements Node {
  id: ID!
  title: String
  createdAt: Date!
  updatedAt: Date!
  UserId: ID
  User: User!
}

input PostFilter {
  AND: [PostFilter!]
  OR: [PostFilter!]
  NOT: PostFilter
  id: ID
  id_in: [ID!]
  title: String
  title_in: [String!]
  title_like: [String!]
  title_startsWith: [String!]
  title_endsWith: [String!]
  UserId: ID
  UserId_in: [ID!]
}

type Posts implements List {
  nodes: [Post!]!
  page: Page!
}

enum PostSortOrder {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  UserId_ASC
  UserId_DESC
  User_ASC
  User_DESC
}

input PostWhere {
  AND: [PostFilter!]
  OR: [PostFilter!]
  NOT: PostFilter
  id: ID
  id_in: [ID!]
  title: String
  title_in: [String!]
  title_like: [String!]
  title_startsWith: [String!]
  title_endsWith: [String!]
  UserId: ID
  UserId_in: [ID!]
  User_empty: UserFilter
  User_some: UserFilter
}

type Query {
  User(where: UserWhere, order: UserSortOrder): User
  Users(where: UserWhere, order: UserSortOrder): Users!
  Loop(where: LoopWhere, order: LoopSortOrder): Loop
  Loops(where: LoopWhere, order: LoopSortOrder): Loops!
  Post(where: PostWhere, order: PostSortOrder): Post
  Posts(where: PostWhere, order: PostSortOrder): Posts!
}

input UpdateLoopData {
  id: ID
  createdAt: Date
  updatedAt: Date
  nextId: ID
  next: LoopWhere
}

input UpdatePostData {
  id: ID
  title: String
  createdAt: Date
  updatedAt: Date
  UserId: ID
  User: PostWhere
}

input UpdateUserData {
  id: ID
  state: UserStateEnumType
  nickname: String
  name: String
  email: String
  createdAt: Date
  updatedAt: Date
  Posts: UserWhere
}

type User implements Node {
  id: ID!
  state: UserStateEnumType
  nickname: String
  name: String!
  email: String!
  createdAt: Date!
  updatedAt: Date!
  Posts: Posts
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_in: [ID!]
  state: UserStateEnumType
  state_in: [UserStateEnumType!]
  nickname: String
  nickname_in: [String!]
  nickname_like: [String!]
  nickname_startsWith: [String!]
  nickname_endsWith: [String!]
  name: String
  name_in: [String!]
  name_like: [String!]
  name_startsWith: [String!]
  name_endsWith: [String!]
  email: String
  email_in: [String!]
  email_like: [String!]
  email_startsWith: [String!]
  email_endsWith: [String!]
}

type Users implements List {
  nodes: [User!]!
  page: Page!
}

enum UserSortOrder {
  id_ASC
  id_DESC
  state_ASC
  state_DESC
  nickname_ASC
  nickname_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  Posts_ASC
  Posts_DESC
}

enum UserStateEnumType {
  admin
  member
  guest
}

input UserWhere {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_in: [ID!]
  state: UserStateEnumType
  state_in: [UserStateEnumType!]
  nickname: String
  nickname_in: [String!]
  nickname_like: [String!]
  nickname_startsWith: [String!]
  nickname_endsWith: [String!]
  name: String
  name_in: [String!]
  name_like: [String!]
  name_startsWith: [String!]
  name_endsWith: [String!]
  email: String
  email_in: [String!]
  email_like: [String!]
  email_startsWith: [String!]
  email_endsWith: [String!]
  Posts_empty: PostFilter
  Posts_some: PostFilter
}
"
`;

exports[`schema should now find Georg as well 1`] = `
Array [
  Object {
    "email": "admin@example.com",
    "id": "1010101010101010-10101010-4101010-8101010-101010101010101010101010",
    "name": "Admin",
    "nickname": "Admin",
    "state": "admin",
  },
  Object {
    "email": "georg@example.com",
    "id": "2020202020202020-20202020-4202020-8202020-202020202020202020202020",
    "name": "Georg",
    "nickname": "Mr.G!",
    "state": "member",
  },
  Object {
    "email": "paul@example.com",
    "id": "3030303030303030-30303030-4303030-8303030-303030303030303030303030",
    "name": "Paul",
    "nickname": "Paulchen",
    "state": "guest",
  },
  Object {
    "email": "frank@example.com",
    "id": "4040404040404040-40404040-4404040-8404040-404040404040404040404040",
    "name": "Frank",
    "nickname": "Effy",
    "state": "member",
  },
]
`;
