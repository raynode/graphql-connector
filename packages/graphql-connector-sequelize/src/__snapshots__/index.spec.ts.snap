// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema should change the user of the post 1`] = `
Object {
  "updatePost": Array [
    Object {
      "User": Object {
        "name": "Admin",
      },
      "title": "This is my new Post",
    },
  ],
}
`;

exports[`schema should correctly load the data 1`] = `
Array [
  Object {
    "createdAt": "2018-11-09T16:00:00.000Z",
    "email": "admin@example.com",
    "id": "1",
    "name": "Admin",
    "nickname": "Admin",
    "state": "admin",
    "updatedAt": "2018-11-09T16:00:00.000Z",
  },
  Object {
    "createdAt": "2018-11-09T16:30:00.000Z",
    "email": "georg@example.com",
    "id": "2",
    "name": "Georg",
    "nickname": "Mr.G!",
    "state": "member",
    "updatedAt": "2018-11-09T16:30:00.000Z",
  },
  Object {
    "createdAt": "2018-11-09T16:40:00.000Z",
    "email": "paul@example.com",
    "id": "3",
    "name": "Paul",
    "nickname": "Paulchen",
    "state": "guest",
    "updatedAt": "2018-11-09T16:40:00.000Z",
  },
  Object {
    "createdAt": "2018-11-09T16:50:00.000Z",
    "email": "frank@example.com",
    "id": "4",
    "name": "Frank",
    "nickname": "Effy",
    "state": "member",
    "updatedAt": "2018-11-09T16:50:00.000Z",
  },
]
`;

exports[`schema should create a bookmark for Paulchen 1`] = `
Object {
  "createLink": Object {
    "id": "105",
    "title": "Examples",
    "url": "https://example.com",
    "user": Object {
      "name": "Paul",
      "nickname": "Paulchen",
    },
  },
}
`;

exports[`schema should create a new user 1`] = `
Object {
  "newUser": Object {
    "email": "jack@example.com",
    "id": "101",
    "name": "Jack",
    "nickname": "Jacky",
  },
}
`;

exports[`schema should create a post 1`] = `
Object {
  "createPost": Object {
    "User": Object {
      "name": "Frank",
    },
    "id": "102",
  },
}
`;

exports[`schema should find all posts and their authors 1`] = `
Object {
  "Posts": Object {
    "nodes": Array [
      Object {
        "User": Object {
          "name": "Admin",
        },
        "title": "This is a Post by the Admin",
      },
      Object {
        "User": Object {
          "name": "Paul",
        },
        "title": "This is by Paulchen",
      },
    ],
  },
}
`;

exports[`schema should find all users that have written a post 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "Posts": Object {
          "nodes": Array [
            Object {
              "title": "This is a Post by the Admin",
            },
          ],
        },
        "name": "Admin",
      },
      Object {
        "Posts": Object {
          "nodes": Array [
            Object {
              "title": "This is by Paulchen",
            },
          ],
        },
        "name": "Paul",
      },
    ],
  },
}
`;

exports[`schema should find everybody except the admin 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "name": "Georg",
        "state": "member",
      },
      Object {
        "name": "Paul",
        "state": "guest",
      },
      Object {
        "name": "Frank",
        "state": "member",
      },
      Object {
        "name": "Jack",
        "state": "guest",
      },
    ],
  },
}
`;

exports[`schema should find only Georg 1`] = `
Object {
  "email": "jack@example.com",
  "id": "101",
  "name": "Jack",
  "nickname": "Jacky",
  "state": "guest",
}
`;

exports[`schema should find the users in ascending order of id 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "id": "1",
        "name": "Admin",
      },
      Object {
        "id": "2",
        "name": "Georg",
      },
      Object {
        "id": "3",
        "name": "Paul",
      },
      Object {
        "id": "4",
        "name": "Frank",
      },
      Object {
        "id": "101",
        "name": "Jack",
      },
    ],
  },
}
`;

exports[`schema should find the users in descending order of id 1`] = `
Object {
  "Users": Object {
    "nodes": Array [
      Object {
        "id": "101",
        "name": "Jack",
      },
      Object {
        "id": "4",
        "name": "Frank",
      },
      Object {
        "id": "3",
        "name": "Paul",
      },
      Object {
        "id": "2",
        "name": "Georg",
      },
      Object {
        "id": "1",
        "name": "Admin",
      },
    ],
  },
}
`;

exports[`schema should generate a full schema 1`] = `
"input CreateLinkData {
  id: ID
  title: String
  url: String
  createdAt: Date
  updatedAt: Date
  user: UserWhere
  tags: TagWhere
}

input CreatePostData {
  id: ID
  title: String
  createdAt: Date
  updatedAt: Date
  User: UserWhere
  tags: TagWhere
}

input CreateTagData {
  id: ID
  tag: String
  createdAt: Date
  updatedAt: Date
  Users: UserWhere
  Links: LinkWhere
  Posts: PostWhere
}

input CreateUserData {
  id: ID
  state: UserStateEnumType
  nickname: String
  name: String
  email: String
  createdAt: Date
  updatedAt: Date
  Posts: PostWhere
  bookmarks: LinkWhere
  tags: TagWhere
}

\\"\\"\\"
A special custom Scalar type for Dates that converts to a ISO formatted string 
\\"\\"\\"
scalar Date

type Link implements Node {
  id: ID!
  title: String!
  url: String!
  createdAt: Date!
  updatedAt: Date!
  user: User
  tags: Tags!
}

input LinkFilter {
  AND: [LinkFilter!]
  OR: [LinkFilter!]
  NOT: LinkFilter
  id: ID
  id_in: [ID!]
  title: String
  title_in: [String!]
  title_like: [String!]
  title_startsWith: [String!]
  title_endsWith: [String!]
  url: String
  url_in: [String!]
  url_like: [String!]
  url_startsWith: [String!]
  url_endsWith: [String!]
}

type Links implements List {
  nodes: [Link!]!
  page: Page!
}

enum LinkSortOrder {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  user_ASC
  user_DESC
  tags_ASC
  tags_DESC
}

input LinkWhere {
  AND: [LinkFilter!]
  OR: [LinkFilter!]
  NOT: LinkFilter
  id: ID
  id_in: [ID!]
  title: String
  title_in: [String!]
  title_like: [String!]
  title_startsWith: [String!]
  title_endsWith: [String!]
  url: String
  url_in: [String!]
  url_like: [String!]
  url_startsWith: [String!]
  url_endsWith: [String!]
  user_empty: UserFilter
  user_some: UserFilter
  tags_empty: TagFilter
  tags_some: TagFilter
}

interface List {
  nodes: [Node!]!
  page: Page!
}

type Mutation {
  createUser(data: CreateUserData): User
  updateUser(data: UpdateUserData, where: UserWhere): [User!]!
  deleteUsers(where: UserWhere, order: UserSortOrder): [User!]!
  createLink(data: CreateLinkData): Link
  updateLink(data: UpdateLinkData, where: LinkWhere): [Link!]!
  deleteLinks(where: LinkWhere, order: LinkSortOrder): [Link!]!
  createPost(data: CreatePostData): Post
  updatePost(data: UpdatePostData, where: PostWhere): [Post!]!
  deletePosts(where: PostWhere, order: PostSortOrder): [Post!]!
  createTag(data: CreateTagData): Tag
  updateTag(data: UpdateTagData, where: TagWhere): [Tag!]!
  deleteTags(where: TagWhere, order: TagSortOrder): [Tag!]!
}

interface Node {
  id: ID
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Post implements Node {
  id: ID!
  title: String!
  createdAt: Date!
  updatedAt: Date!
  User: User
  tags: Tags!
}

input PostFilter {
  AND: [PostFilter!]
  OR: [PostFilter!]
  NOT: PostFilter
  id: ID
  id_in: [ID!]
  title: String
  title_in: [String!]
  title_like: [String!]
  title_startsWith: [String!]
  title_endsWith: [String!]
}

type Posts implements List {
  nodes: [Post!]!
  page: Page!
}

enum PostSortOrder {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  User_ASC
  User_DESC
  tags_ASC
  tags_DESC
}

input PostWhere {
  AND: [PostFilter!]
  OR: [PostFilter!]
  NOT: PostFilter
  id: ID
  id_in: [ID!]
  title: String
  title_in: [String!]
  title_like: [String!]
  title_startsWith: [String!]
  title_endsWith: [String!]
  User_empty: UserFilter
  User_some: UserFilter
  tags_empty: TagFilter
  tags_some: TagFilter
}

type Query {
  User(where: UserWhere, order: UserSortOrder): User
  Users(where: UserWhere, order: UserSortOrder): Users!
  Link(where: LinkWhere, order: LinkSortOrder): Link
  Links(where: LinkWhere, order: LinkSortOrder): Links!
  Post(where: PostWhere, order: PostSortOrder): Post
  Posts(where: PostWhere, order: PostSortOrder): Posts!
  Tag(where: TagWhere, order: TagSortOrder): Tag
  Tags(where: TagWhere, order: TagSortOrder): Tags!
}

type Subscription {
  onCreateUser: User!
  onDeleteUsers: [User!]!
  onUpdateUser: User
  onCreateLink: Link!
  onDeleteLinks: [Link!]!
  onUpdateLink: Link
  onCreatePost: Post!
  onDeletePosts: [Post!]!
  onUpdatePost: Post
  onCreateTag: Tag!
  onDeleteTags: [Tag!]!
  onUpdateTag: Tag
}

type Tag implements Node {
  id: ID!
  tag: String!
  createdAt: Date!
  updatedAt: Date!
  Users: Users!
  Links: Links!
  Posts: Posts!
}

input TagFilter {
  AND: [TagFilter!]
  OR: [TagFilter!]
  NOT: TagFilter
  id: ID
  id_in: [ID!]
  tag: String
  tag_in: [String!]
  tag_like: [String!]
  tag_startsWith: [String!]
  tag_endsWith: [String!]
}

type Tags implements List {
  nodes: [Tag!]!
  page: Page!
}

enum TagSortOrder {
  id_ASC
  id_DESC
  tag_ASC
  tag_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  TagLinks_ASC
  TagLinks_DESC
  Users_ASC
  Users_DESC
  Links_ASC
  Links_DESC
  Posts_ASC
  Posts_DESC
}

input TagWhere {
  AND: [TagFilter!]
  OR: [TagFilter!]
  NOT: TagFilter
  id: ID
  id_in: [ID!]
  tag: String
  tag_in: [String!]
  tag_like: [String!]
  tag_startsWith: [String!]
  tag_endsWith: [String!]
  Users_empty: UserFilter
  Users_some: UserFilter
  Links_empty: LinkFilter
  Links_some: LinkFilter
  Posts_empty: PostFilter
  Posts_some: PostFilter
}

input UpdateLinkData {
  id: ID
  title: String
  url: String
  createdAt: Date
  updatedAt: Date
  user: LinkWhere
  tags: LinkWhere
}

input UpdatePostData {
  id: ID
  title: String
  createdAt: Date
  updatedAt: Date
  User: PostWhere
  tags: PostWhere
}

input UpdateTagData {
  id: ID
  tag: String
  createdAt: Date
  updatedAt: Date
  Users: TagWhere
  Links: TagWhere
  Posts: TagWhere
}

input UpdateUserData {
  id: ID
  state: UserStateEnumType
  nickname: String
  name: String
  email: String
  createdAt: Date
  updatedAt: Date
  Posts: UserWhere
  bookmarks: UserWhere
  tags: UserWhere
}

type User implements Node {
  id: ID!
  state: UserStateEnumType
  nickname: String
  name: String!
  email: String!
  createdAt: Date!
  updatedAt: Date!
  Posts: Posts!
  bookmarks: Links!
  tags: Tags!
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_in: [ID!]
  state: UserStateEnumType
  state_in: [UserStateEnumType!]
  nickname: String
  nickname_in: [String!]
  nickname_like: [String!]
  nickname_startsWith: [String!]
  nickname_endsWith: [String!]
  name: String
  name_in: [String!]
  name_like: [String!]
  name_startsWith: [String!]
  name_endsWith: [String!]
  email: String
  email_in: [String!]
  email_like: [String!]
  email_startsWith: [String!]
  email_endsWith: [String!]
}

type Users implements List {
  nodes: [User!]!
  page: Page!
}

enum UserSortOrder {
  id_ASC
  id_DESC
  state_ASC
  state_DESC
  nickname_ASC
  nickname_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  Posts_ASC
  Posts_DESC
  bookmarks_ASC
  bookmarks_DESC
  tags_ASC
  tags_DESC
}

enum UserStateEnumType {
  admin
  member
  guest
}

input UserWhere {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_in: [ID!]
  state: UserStateEnumType
  state_in: [UserStateEnumType!]
  nickname: String
  nickname_in: [String!]
  nickname_like: [String!]
  nickname_startsWith: [String!]
  nickname_endsWith: [String!]
  name: String
  name_in: [String!]
  name_like: [String!]
  name_startsWith: [String!]
  name_endsWith: [String!]
  email: String
  email_in: [String!]
  email_like: [String!]
  email_startsWith: [String!]
  email_endsWith: [String!]
  Posts_empty: PostFilter
  Posts_some: PostFilter
  bookmarks_empty: LinkFilter
  bookmarks_some: LinkFilter
  tags_empty: TagFilter
  tags_some: TagFilter
}
"
`;

exports[`schema should now find Georg as well 1`] = `
Array [
  Object {
    "email": "admin@example.com",
    "id": "1",
    "name": "Admin",
    "nickname": "Admin",
    "state": "admin",
  },
  Object {
    "email": "georg@example.com",
    "id": "2",
    "name": "Georg",
    "nickname": "Mr.G!",
    "state": "member",
  },
  Object {
    "email": "paul@example.com",
    "id": "3",
    "name": "Paul",
    "nickname": "Paulchen",
    "state": "guest",
  },
  Object {
    "email": "frank@example.com",
    "id": "4",
    "name": "Frank",
    "nickname": "Effy",
    "state": "member",
  },
  Object {
    "email": "jack@example.com",
    "id": "101",
    "name": "Jack",
    "nickname": "Jacky",
    "state": "guest",
  },
]
`;

exports[`schema should update a post 1`] = `
Object {
  "updatePost": Array [
    Object {
      "id": "102",
      "title": "This is my new Post",
    },
  ],
}
`;
