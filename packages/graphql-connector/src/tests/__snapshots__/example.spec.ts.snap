// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should handle the example code should find all posts: Data 1`] = `
Object {
  "Posts": Object {
    "nodes": Array [
      Object {
        "author": Object {
          "name": "Paul",
        },
        "comments": Object {
          "nodes": Array [],
        },
        "text": "This is a good time to be alive, this is our new Blog. Clean code to the max!",
        "title": "Welcome to the new Blog!",
        "upvotes": 17,
      },
      Object {
        "author": Object {
          "name": "Georg",
        },
        "comments": Object {
          "nodes": Array [
            Object {
              "commentor": Object {
                "name": "Georg",
              },
              "msg": "I believe!",
            },
          ],
        },
        "text": "I think that is a fair question, GraphQL sometimes feels very alien to people.",
        "title": "Was alien technology involved?",
        "upvotes": 4,
      },
    ],
  },
}
`;

exports[`should handle the example code should find the user by name: Data 1`] = `
Object {
  "nodes": Array [
    Object {
      "email": "georg@example.com",
      "name": "Georg",
      "posts": Object {
        "nodes": Array [
          Object {
            "comments": Object {
              "nodes": Array [
                Object {
                  "commentor": Object {
                    "name": "Georg",
                  },
                  "msg": "I believe!",
                },
              ],
            },
            "text": "I think that is a fair question, GraphQL sometimes feels very alien to people.",
            "title": "Was alien technology involved?",
            "upvotes": 4,
          },
        ],
      },
    },
    Object {
      "email": "paul@example.com",
      "name": "Paul",
      "posts": Object {
        "nodes": Array [
          Object {
            "comments": Object {
              "nodes": Array [],
            },
            "text": "This is a good time to be alive, this is our new Blog. Clean code to the max!",
            "title": "Welcome to the new Blog!",
            "upvotes": 17,
          },
        ],
      },
    },
  ],
}
`;

exports[`should handle the example code should find the user by name: Select authors and their posts 1`] = `
Array [
  Array [
    Object {
      "email": "georg@example.com",
      "name": "Georg",
      "posts": Object {
        "nodes": Array [
          Object {
            "comments": Object {
              "nodes": Array [
                Object {
                  "commentor": Object {
                    "name": "Georg",
                  },
                  "msg": "I believe!",
                },
              ],
            },
            "text": "I think that is a fair question, GraphQL sometimes feels very alien to people.",
            "title": "Was alien technology involved?",
            "upvotes": 4,
          },
        ],
      },
    },
    Object {
      "email": "paul@example.com",
      "name": "Paul",
      "posts": Object {
        "nodes": Array [
          Object {
            "comments": Object {
              "nodes": Array [],
            },
            "text": "This is a good time to be alive, this is our new Blog. Clean code to the max!",
            "title": "Welcome to the new Blog!",
            "upvotes": 17,
          },
        ],
      },
    },
  ],
  "=== === ===",
  "Georg [georg@example.com]: 1",
  "=== Was alien technology involved? (4:1) ===",
  "---
I think that is a fair question, GraphQL sometimes feels very alien to people.
---",
  "--> Georg: \\"I believe!\\"",
  "=== === ===",
  "=== === ===",
  "Paul [paul@example.com]: 1",
  "=== Welcome to the new Blog! (17:0) ===",
  "---
This is a good time to be alive, this is our new Blog. Clean code to the max!
---",
  "=== === ===",
]
`;

exports[`should handle the example code should have the correct schema: Schema 1`] = `
"type Comment implements Node {
  id: ID
  createdAt: Date
  lastUpdate: Date
  msg: String
  commentor: User
  post: Post
}

input CommentFilter {
  id: ID
  id_not: ID
  msg: String
  msg_not: String
}

type Comments implements List {
  nodes: [Comment!]!
  page: Page!
}

enum CommentSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdate_ASC
  lastUpdate_DESC
  msg_ASC
  msg_DESC
  commentor_ASC
  commentor_DESC
  post_ASC
  post_DESC
}

input CreateCommentData {
  id: ID
  createdAt: Date
  lastUpdate: Date
  msg: String
  commentor: UserFilter
  post: PostFilter
}

input CreatePostData {
  id: ID
  createdAt: Date
  lastUpdate: Date
  title: String
  text: String
  upvotes: Int
  author: UserFilter
  comments: CommentFilter
}

input CreateUserData {
  id: ID
  createdAt: Date
  lastUpdate: Date
  name: String
  email: String
  password: String
  num: Int
  posts: PostFilter
  comments: CommentFilter
}

\\"\\"\\"
A special custom Scalar type for Dates that converts to a ISO formatted string 
\\"\\"\\"
scalar Date

interface List {
  nodes: [Node!]!
  page: Page!
}

type Mutation {
  createUser(data: CreateUserData): User
  updateUser(data: UpdateUserData, where: UserFilter): User
  deleteUsers(where: UserFilter, order: UserSortOrder): Users!
  createPost(data: CreatePostData): Post
  updatePost(data: UpdatePostData, where: PostFilter): Post
  deletePosts(where: PostFilter, order: PostSortOrder): Posts!
  createComment(data: CreateCommentData): Comment
  updateComment(data: UpdateCommentData, where: CommentFilter): Comment
  deleteComments(where: CommentFilter, order: CommentSortOrder): Comments!
}

interface Node {
  id: ID
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Post implements Node {
  id: ID
  createdAt: Date
  lastUpdate: Date
  title: String
  text: String
  upvotes: Int
  author: User
  comments: Comments
}

input PostFilter {
  id: ID
  id_not: ID
  title: String
  title_not: String
  text: String
  text_not: String
  upvotes: Int
  upvotes_not: Int
  upvotes_gt: Int
  upvotes_lt: Int
}

type Posts implements List {
  nodes: [Post!]!
  page: Page!
}

enum PostSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdate_ASC
  lastUpdate_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  upvotes_ASC
  upvotes_DESC
  userId_ASC
  userId_DESC
  author_ASC
  author_DESC
  comments_ASC
  comments_DESC
}

type Query {
  User(where: UserFilter, order: UserSortOrder): User
  Users(where: UserFilter, order: UserSortOrder): Users!
  Post(where: PostFilter, order: PostSortOrder): Post
  Posts(where: PostFilter, order: PostSortOrder): Posts!
  Comment(where: CommentFilter, order: CommentSortOrder): Comment
  Comments(where: CommentFilter, order: CommentSortOrder): Comments!
}

input UpdateCommentData {
  id: ID
  createdAt: Date
  lastUpdate: Date
  msg: String
  commentor: CommentFilter
  post: CommentFilter
}

input UpdatePostData {
  id: ID
  createdAt: Date
  lastUpdate: Date
  title: String
  text: String
  upvotes: Int
  author: PostFilter
  comments: PostFilter
}

input UpdateUserData {
  id: ID
  createdAt: Date
  lastUpdate: Date
  name: String
  email: String
  password: String
  num: Int
  posts: UserFilter
  comments: UserFilter
}

type User implements Node {
  id: ID
  createdAt: Date
  lastUpdate: Date
  name: String
  email: String
  password: String
  num: Int
  posts: Posts
  comments: Comments
}

input UserFilter {
  id: ID
  id_not: ID
  name: String
  name_not: String
  email: String
  email_not: String
  password: String
  password_not: String
  num: Int
  num_not: Int
  num_gt: Int
  num_lt: Int
}

type Users implements List {
  nodes: [User!]!
  page: Page!
}

enum UserSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdate_ASC
  lastUpdate_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  num_ASC
  num_DESC
  posts_ASC
  posts_DESC
  comments_ASC
  comments_DESC
}
"
`;
